#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers

sem_t forks[N];  // One semaphore per fork

void* philosopher(void* num) {
    int id = *(int*)num;
    int left = id;
    int right = (id + 1) % N;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        // Pick up forks (order depends on philosopher ID to avoid deadlock)
        if (id % 2 == 0) {
            sem_wait(&forks[right]);
            sem_wait(&forks[left]);
        } else {
            sem_wait(&forks[left]);
            sem_wait(&forks[right]);
        }

        printf("Philosopher %d is eating.\n", id);
        sleep(2);  // Simulate eating

        // Put down forks
        sem_post(&forks[left]);
        sem_post(&forks[right]);

        printf("Philosopher %d finished eating.\n", id);
        sleep(1);
    }
}

int main() {
    pthread_t tid[N];
    int ids[N];

    // Initialize semaphores (forks)
    for (int i = 0; i < N; i++)
        sem_init(&forks[i], 0, 1);

    // Create philosopher threads
    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&tid[i], NULL, philosopher, &ids[i]);
    }

    // Join threads (not really needed here as it's an infinite loop)
    for (int i = 0; i < N; i++)
        pthread_join(tid[i], NULL);

    return 0;
}
